##############################################################################
# Dicop main server configuration

# See perldoc doc/Config.pod for further information

##############################################################################
# General options

# Set to 0 to disable handing out chunks temporarily
Hand_Out_Work	= 1

##############################################################################
# my own address and name for formulars and links

# For embedding into html templates
self = "/"

# Which style to use as default
default_style = "default"

# could equal hostname
name = "dicop-test"

# title string prepended to HTML page titles
title = "DiCoP - "

# URL with prefix of the fileserver to hand out new workers and target files
# (needs trailing slash)
file_server = "http://127.0.0.1:8080/dicop/files/"

##############################################################################
# URL formats

# The format string to build automatically URLs for cases when url = "".
# Strings like ##name## will be replaced with the field from the case, allowed
# are 'name', 'description', 'id' and 'referee'.
case_url_format         = "http://193.162.0.5/case_db?case_id=##name##"

# The format string to submit any events (found a result, started job,
# failed job) to. The following parameters will be replaced with the
# respective values:
# ##caseid##, ##jobid##, ##casename##, ##jobname##, #jobdescription## etc
# ##eventtext## is replaced by the contents of the file 'tpl/event/EVENT.txt'
# (and any templates in that file are replaced beforehand, too) where EVENT is one
# of "found_result", "new_job", "job_failed".
# Comment out or set to "" to disable this feature.
#send_event_url_format	= "http://193.162.0.2/case_db?case_id=##casename##&text=##eventtext##"


##############################################################################
# Configuration of daemon

# On which interface should the deamon be bound? "*" means on all interfaces
# of this machine, other variants would be "eth0" etc.
host    = "*"
# The port to listen on.
port	= "8888"

# User and group the daemon process should switch itself to after start.
# Make shure that the user and group below actually exist and the permissions
# are adjusted accordingly
user	= "dicop"
group	= "dicop"

# After starting, go to the background. 0 to disable, and 1 to enable.
background = 0

# After binding to the port, chroot() to the current dir. Very recommended
# for security reasons.
# NOTE: If chroot is enabled, external scripts (in jobtypes) might stop
# working because they will fail to load external libraries and files.
# Either disable chroot, or copy all the neccessary data under ./scripts!
chroot = "."

# In seconds, value the deamon should sleep before trying to change the
# user and group and start really working. Default 0, usually 0, only
# needed for boot-from-cd-demo
initial_sleep = 0

# wait so many minutes before flushing your data to disk
flush	= 60

##############################################################################
# security config

# The following settings consist of lists of IPs or nets, separated by ','.
# The word 'any' is equivalent to 0.0.0.0/0 and 'none' to 0.0.0.0/32

# Note that the default is deny, e.g. if not explicitely listed, the right to
# do something is denied. To deny specific IPs (like spoofed or 'impossible'
# one) you should deploy a packetfilter or firewall in addition to these
# settings.

# Examples:
# 0.0.0.0/32            all IPs (usually only for allow_work and allow_stats,
#                       otherwise a bad idea
# any                   same as 0.0.0.0/0
# 1.2.3.4/32            IP 1.2.3.4 only
# 1.2.3.4               the same as 1.2.3.4/32
# 1.2.3.0/24            class c net 1.2.3.0
# 1.2.0.0/16            class b net 1.2.0.0
# 1.2.3.4,1.2.4.0/24    1.2.3.4 and 1.2.4.0

# The IPs that are allowed to do the following:

# administrate the server
allow_admin	= "127.0.0.1, 192.168.0.1/32, 192.168.0.2, 192.168.1.0/24"
# request work and submit results
allow_work	= "any"
# view arbitrary status pages (usually private)
allow_status	= "127.0.0.1, 192.168.0.0/16"
# to view client list and per-client statistics (usually public)
allow_stats	= "0.0.0.0/0"

# The IPs that are denied to do the following:

# administrate the server
deny_admin	= "none"
# request work and submit results
deny_work	= "none"
# view arbitrary status pages (usually private)
deny_status	= "none"
# to view client list and per-client statistics (usually public)
deny_stats	= "none"

##############################################################################
# Mail config (see in MAILTEXT_DIR/ for the actual mail header/bodies)

# name or ip of server accepting connections on port 25 (set to 'none' to
# disable the email feature)
mail_server	= none
#mail_server	= 127.0.0.1

# This one will get a copy of all mails, set to 'none' to skip Cc:'s
mail_admin	= root@localhost

# Enter the email address that will appear in the From:, To: or Errors-To:
# field of all emails from the server. The string ##mail_from## etc will then
# be replaced in the mail template text
mail_from	= "'Dicop' <dicop@localhost>"
mail_to		= root@localhost
mail_errors	= root@localhost

##############################################################################
# Directories

# must NOT have "/" at end!
log_dir		= logs
msg_dir		= msg
def_dir		= def
tpl_dir		= tpl
data_dir	= data
worker_dir	= worker
# it's currently not possible to change the target dir due to hardcoded checks
target_dir	= target
# server-side scripts to extract target data are stored here:
scripts_dir	= scripts
# these texts are found inside this template dir (e.g. inside tpl_dir)
mailtxt_dir	= mail
eventtxt_dir	= event

# Name of log files (inside log_dir)
# for errors
error_log	= error.log
# for start/stop messages etc
server_log	= server.log

# Name of data files (inside data_dir)
jobs_list	= jobs.lst
cases_list	= cases.lst
clients_list	= clients.lst
groups_list	= groups.lst
charsets_list	= charsets.lst
jobtypes_list	= jobtypes.lst
proxies_list	= proxies.lst
results_list	= results.lst
testcases_list	= testcases.lst
users_list	= users.lst

# Name of definition files (inside def_dir)
patterns_file		= request.def
objects_def_file	= objects.def

# Name of output file (inside main dir aka "./")
charset_definitions   = "worker/charsets.def"

##############################################################################
# logging/debug

# These values are cumulative, meaning adding them together will yield what
# is logged. Default is 7. A log_level above 4 will generate LOTs of data!
# You can also write it like log_level = 1+2+16

#  0 - no loggging
#  1 - log critical errors
#  2 - log important server messages (startup/shutdown)
#  4 - log non-critical errors
#  8 - log unimportant server messages (data flush etc)

# Warning, the next two settings generate a lot of output!
# 16 - log all requests
# 32 - log all responses

log_level       = 4+2+1

# Set to 1 to enable debug mode (cmd_status;type_debug)
# Set to 2 to enable leak reports in logs/leak.log, Warning: generates LOTs of
# data! To make debug_level = 2 usefull, you need to compile Perl with:
# ./configure -Accflags=-DDEBUGGING && make

debug_level	= 1

##############################################################################
# checking online/offline clients

# how often to check all client's for being offline/online (in hours)
client_check_time       = 1

# no contact for longer than this & the client is reported missing (in hours)
client_offline_time     = 24

##############################################################################
# chunk settings

# chunk sizes in minutes
min_chunk_size = 5
max_chunk_size = 60

##############################################################################
# verify chunks done by clients by other clients (See Anticheat.pod for
# further documentation)

# Applying the verify check for each chunk can cost performance, so you may
# enable it only for every Nth chunk. This allows you to have only a small
# overhead, but catch cheating clients eventually.
# 1 = every DONE chunk, 2 = every other DONE chunk, 3 = every third, etc
# Note that there is no such setting for SOLVED chunks, they will always be
# verified (or not, depending on whether you set verify_solved_chunks and
# verify_trusted_solved_chunks to something different from 0)
verify_every_done_chunk = 1

# How many verify checks needs a chunk to be accepted as really DONE?
# Setting verify_done_chunks to something greater than 0 makes everything by
# (verify_done_chunks +1) as a factor slower (since it will do so much more
# work) unless you set verify_every_done_chunk to something different than 1.
verify_done_chunks = 0

# The same for SOLVED chunks.  Since this setting applies only to the rare
# SOLVED chunks and can thus be higher by default. Used to prevent somebody
# submitting false solutions.
verify_solved_chunks = 2

# The following two are used only for known trustworthy clients, e.g. the
# default means a DONE chunk from a trusted client needs no further
# verification.
verify_trusted_done_chunks = 0
verify_trusted_solved_chunks = 2

# If you really distrust untrusted clients, and you usually do, you should
# leave this on. It means that a solution needs always be checked by a
# at least one trusted client. Note that you (obviously) need at least one
# trusted client, and it should be comparatively fast, so that it can actually
# check the solutions of other, fast, but untrustworthy clients.
verify_solved_chunks_with_trusted = on

##############################################################################
# misc. config

# This client's stats will be used to display how many "CPUs" the cluster has
reference_client_id  = 1

# resend a testcase to the clients after so many minutes if they encountered an
# error in working on testcases
resend_test = 360

# job with minimum rank gets this percent of chunks
minimum_rank_percent = 90

# In seconds, how long to spent handling one request at most, in seconds.
# Don't set to high to prevent locking up the server
max_request_time = 5

# Clients with a lower version than this are not allowed to connect
# Set to 0 to disable check 
require_client_version  = 3.00
# The same for the build, set to 0 to disable and check only version number
require_client_build    = 77

# Allowed client architectures (anything else is invalid)
client_architectures    = linux,mswin32,os2,darwin,solaris

# EOF
